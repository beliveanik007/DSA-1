#include<iostream>
#include<vector>
#include<queue>
#include<stack>
using namespace std;

void BFS(vector< int > Graph[], int V, int source)
{
    queue< int > q;
    q.push(source);

    int visited[V] = {0};

    while(q.empty() == false)
    {
        int startToVisit = q.front();
        q.pop();

        if(visited[startToVisit]==1)
            continue;

        for(int i=0; i<Graph[startToVisit].size(); i++)
        {
            int neighbor = Graph[startToVisit][i];
            if(visited[neighbor]==0)
                q.push(neighbor);
        }
        visited[startToVisit] = 1;
        cout << startToVisit << " ";
    }
    cout << endl;
}


void DFS(vector< int > Graph[], int V, int source)
{
    stack< int > st;
    st.push(source);

    int visited[V] = {0};

    while(st.empty() == false)
    {
        int startToVisit = st.top();
        st.pop();

        if(visited[startToVisit]==1)
            continue;

        for(int i=0; i<Graph[startToVisit].size(); i++)
        {
            int neighbor = Graph[startToVisit][i];
            if(visited[neighbor]==0)
                st.push(neighbor);
        }
        visited[startToVisit] = 1;
        cout << startToVisit << " ";
    }
    cout << endl;
}


int main()
{
    freopen("input.txt", "r", stdin);
    int vertices, edges; cin >> vertices >> edges;
    vector< int > Graph[vertices];

    for(int i=0; i<edges; i++)
    {
        int from, to;
        cin >> from >> to;
        Graph[from].push_back(to);
    }

    for(int i=0; i<vertices; i++)
    {
        cout << i << " --> ";
        for(int j=0; j<Graph[i].size(); j++)
            cout << Graph[i][j] << " ";
        cout << endl;
    }


    BFS(Graph, vertices, 0);
    DFS(Graph, vertices, 0);
    return 0;
}
